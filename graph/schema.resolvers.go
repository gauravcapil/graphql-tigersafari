package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"

	"gaurav.kapil/tigerhall/graph/model"
	"github.com/99designs/gqlgen/graphql"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, userName string, password string, email string) (*model.UserData, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateNewTiger is the resolver for the createNewTiger field.
func (r *mutationResolver) CreateNewTiger(ctx context.Context, userName string, name string, dateOfBirth string, lastSeen string, seenAtLat string, seenAtLon string, photo graphql.Upload) (int, error) {
	panic(fmt.Errorf("not implemented: CreateNewTiger - createNewTiger"))
}

// CreateNewSighting is the resolver for the createNewSighting field.
func (r *mutationResolver) CreateNewSighting(ctx context.Context, userName string, name string, seenAt string, seenAtLat string, seenAtLon string, photo graphql.Upload) (int, error) {
	panic(fmt.Errorf("not implemented: CreateNewSighting - createNewSighting"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, userName string, password *string) (*model.LoginData, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// ListTigers is the resolver for the listTigers field.
func (r *queryResolver) ListTigers(ctx context.Context, sortedByLastSeen bool) ([]*model.TigerDataLastSeen, error) {
	panic(fmt.Errorf("not implemented: ListTigers - listTigers"))
}

// ListAllSightings is the resolver for the listAllSightings field.
func (r *queryResolver) ListAllSightings(ctx context.Context, tiger string) ([]*model.Sighting, error) {
	panic(fmt.Errorf("not implemented: ListAllSightings - listAllSightings"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
